## Global settings
nameOverride: ""
fullnameOverride: ""

## Image settings
phpImage:
  repository: rg.nl-ams.scw.cloud/unframed-container-registry/php
  tag: "8.3"
  pullPolicy: Always

## Nginx image for serving WordPress
nginxImage:
  repository: rg.nl-ams.scw.cloud/unframed-container-registry/nginx
  tag: "latest"
  pullPolicy: Always

## Data container for application files
dataImage:
  repository: rg.nl-ams.scw.cloud/unframed-container-registry/dummy_page
  tag: "latest"
  pullPolicy: IfNotPresent


## Application settings
laravel:
  env:
    APP_ENV: production
    APP_DEBUG: "false"

    LOG_CHANNEL: stack
    LOG_LEVEL: debug
    
    DB_CONNECTION: mysql  
    BROADCAST_DRIVER: log
    CACHE_DRIVER: database
    FILESYSTEM_DISK: local
    QUEUE_CONNECTION: database
    SESSION_DRIVER: database
    SESSION_LIFETIME: 120
  
  # Laravel specific settings
  config:
    webRoot: "/var/www/html/public"

## Shared volume settings
sharedVolume:
  name: app-data

## Scaling settings
replicaCount: 1

## Service settings
service:
  type: ClusterIP
  port: 8080

## Ingress settings
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

## Resource settings
resources:
  php:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  nginx:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  init:
    requests:
      cpu: 10m
      memory: 32Mi

## Probe settings
probes:
  liveness:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    path: /
    port: 8080
  readiness:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    path: /
    port: 8080
  startup:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    path: /
    port: 8080

## Autoscaling settings
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## MySQL database settings
mysql:
  enabled: true
  auth:
    database: laravel
    username: laravel
    password: ""
    rootPassword: ""
  primary:
    persistence:
      enabled: true
      size: 8Gi

## Redis cache settings
redis:
  enabled: false
  image:
    repository: redis
    tag: "7.0-alpine"
    pullPolicy: IfNotPresent
  auth:
    enabled: false
    password: ""
  persistence:
    enabled: false
    size: 1Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    port: 6379
  config:
    maxmemory: "100mb"
    maxmemoryPolicy: "allkeys-lru"

## Queue workers configuration
## Each worker runs "php artisan queue:work" in a PHP container
queueWorkers:
  enabled: false
  # List of queue workers to deploy
  workers:
    - name: default       # Worker name
      replicas: 1         # Number of worker replicas
      connection: database # Queue connection to use (default: default)
      queue: default      # Queue to process (default: default)
      tries: 3            # Number of times to attempt a job before logging it failed (default: 3)
      timeout: 60         # The number of seconds a child process can run (default: 60)
      sleep: 3            # Number of seconds to sleep when no job is available (default: 3)
      memory: 128         # The memory limit in megabytes (default: 128)
      resources:          # Optional resource limits and requests
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 128Mi

## Migration job configuration
## Runs Laravel migrations before deployment using ArgoCD PreSync hooks
migrationJob:
  enabled: true
  # ArgoCD hook configuration
  hook:
    enabled: true
    # Hook phase - PreSync runs before the main deployment
    phase: PreSync
    # Delete policy - what to do with the job after completion
    deletePolicy: BeforeHookCreation
  # Migration command to run
  command: "php artisan migrate --force"
  # Resource limits and requests for the migration job
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # Job settings
  backoffLimit: 3
  activeDeadlineSeconds: 600
  restartPolicy: Never

## Cron jobs configuration
cronJobs:
  enabled: true
  # Enable Laravel's scheduler (runs every minute)
  scheduler: true
  # List of additional cron jobs to deploy
  jobs: []
  # - name: example-cron        # Cron job name
  #   schedule: "0 * * * *"     # Cron schedule expression (hourly)
  #   command: "php artisan example:command"  # Command to run
  #   resources:                # Optional resource limits and requests
  #     limits:
  #       cpu: 500m
  #       memory: 512Mi
  #     requests:
  #       cpu: 100m
  #       memory: 128Mi

## Secret mounts configuration
## Reference existing secrets and mount their keys as environment variables
secretMounts: []
# - secretName: "laravel-db-credentials"
#   keys:
#     # Simple key (no renaming)
#     - "DB_USERNAME"
#     - "DB_PASSWORD"
#     - "DB_HOST"
#     # Key with renaming (from -> to)
#     - from: "DB_DATABASE"
#       to: "DB_NAME"

## Pod settings
podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 33
  seccompProfile:
    type: RuntimeDefault
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  runAsNonRoot: true
  runAsUser: 33
  seccompProfile:
    type: RuntimeDefault
nodeSelector: {}
tolerations: []
affinity: {}
