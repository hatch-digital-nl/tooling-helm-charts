## Global settings
nameOverride: ""
fullnameOverride: ""

## ArgoCD Sync Waves configuration
## Controls the order of resource deployment in ArgoCD
syncWaves:
  enabled: true
  # Database CRD must be created first so KindaDB operator can provision database
  database: -3
  # Redis can be deployed after database but before application
  redis: -2
  # Migration job runs after database is ready but before application starts
  migration: -1
  # All application resources deploy together
  application: 0

## Image settings
phpImage:
  repository: ghcr.io/hatch-digital-nl/tooling-docker-containers/php
  tag: "8.3"
  pullPolicy: Always

## Nginx image for serving WordPress
nginxImage:
  repository: ghcr.io/hatch-digital-nl/tooling-docker-containers/nginx
  tag: "latest"
  pullPolicy: Always

## Data container for application files
dataImage:
  repository: ghcr.io/hatch-digital-nl/hosting-dummy-page
  tag: "latest"
  pullPolicy: IfNotPresent

## Application settings
wordpress:
  # Bedrock specific settings
  bedrock:
    enabled: true
    webRoot: "/var/www/html/public"
  
  # Environment variables
  env:   
    # WordPress environment
    WP_ENV: production
    WP_HOME: https://example.com
    WP_SITEURL: https://example.com/wp
    
    # WordPress security keys and salts
    # Generate these using: https://roots.io/salts.html
    AUTH_KEY: ""
    SECURE_AUTH_KEY: ""
    LOGGED_IN_KEY: ""
    NONCE_KEY: ""
    AUTH_SALT: ""
    SECURE_AUTH_SALT: ""
    LOGGED_IN_SALT: ""
    NONCE_SALT: ""
    
    # Redis cache settings (used by W3 Total Cache plugin)
    # These will only be set if redis.enabled is true
    # WP_REDIS_HOST: ""
    # WP_REDIS_PORT: "6379"
    # WP_REDIS_PASSWORD: ""
    # WP_REDIS_TIMEOUT: "1"
    # WP_REDIS_READ_TIMEOUT: "1"
    # WP_REDIS_DATABASE: "0"

## Shared volume settings
sharedVolume:
  name: app-data
  
## Service settings
service:
  type: ClusterIP
  port: 8080

## Ingress settings
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

## Cyso Ingress settings
## Simplified ingress configuration that automatically creates separate ingress resources
## for each host with Let's Encrypt certificates
cysoIngress:
  enabled: false
  # List of hostnames to create ingress resources for
  hosts: []
  # - "my.testing.cirmar.com"
  # - "my.testing.cirmar.dkpnt.nl"
  # Optional: Override default annotations
  annotations:
    cert-manager.io/cluster-issuer: cyso-letsencrypt
  # Optional: Override default path configuration
  path: "/"
  pathType: ImplementationSpecific

## Scaling settings
replicaCount: 1

## Autoscaling settings
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  # Optional custom metrics
  # customMetrics: []
  # Optional scaling behavior
  # behavior:
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #     - type: Percent
  #       value: 100
  #       periodSeconds: 15
  #   scaleUp:
  #     stabilizationWindowSeconds: 0
  #     policies:
  #     - type: Percent
  #       value: 100
  #       periodSeconds: 15
  #     - type: Pods
  #       value: 4
  #       periodSeconds: 15
  #     selectPolicy: Max

## Resource settings
resources:
  php:
    requests:
      cpu: 500m
      memory: 512Mi
  nginx:
    requests:
      cpu: 100m
      memory: 128Mi
  init:
    requests:
      cpu: 10m
      memory: 32Mi

## Probe settings
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    path: /healthz
    port: 8080
  readiness:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    path: /healthz
    port: 8080
  startup:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1
    path: /healthz
    port: 8080

## Redis cache settings
redis:
  enabled: false
  image:
    repository: redis
    tag: "7.0-alpine"
    pullPolicy: IfNotPresent
  auth:
    enabled: false
    password: ""
  persistence:
    enabled: false
    size: 1Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  service:
    port: 6379
  config:
    maxmemory: "100mb"
    maxmemoryPolicy: "allkeys-lru"

## Database configuration for DB Operator
## When enabled, creates a Database CRD and automatically mounts the generated secret
database:
  enabled: false
  # Name of the database cluster instance (required when enabled)
  instance: ""
  # Name of the database to create (required when enabled)
  name: ""
  # Whether to enable deletion protection for the database
  deletionProtected: true
  # Custom secret templates for WordPress Bedrock database credentials
  secretsTemplates:
    DB_HOST: "{{ .DatabaseHost }}"
    DB_PORT: "{{ .DatabasePort }}"
    DB_NAME: "{{ .DatabaseName }}"
    DB_USER: "{{ .UserName }}"
    DB_PASSWORD: "{{ .Password }}"

## Secret mounts configuration
## Reference existing secrets and mount their keys as environment variables
secretMounts: []
# - secretName: "wordpress-db-credentials"
#   keys:
#     # Simple key (no renaming)
#     - "DB_USER"
#     - "DB_PASSWORD"
#     - "DB_HOST"
#     # Key with renaming (from -> to)
#     - from: "DB_DATABASE"
#       to: "DB_NAME"
# - secretName: "wordpress-s3-credentials"
#   keys:
#     - "S3_UPLOADS_BUCKET"
#     - "S3_UPLOADS_KEY"
#     - "S3_UPLOADS_SECRET"
#     - "S3_UPLOADS_REGION"
#     # Example of key renaming
#     - from: "AWS_S3_BUCKET"
#       to: "S3_UPLOADS_BUCKET"

## Pod settings
podAnnotations: {}
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 33
  seccompProfile:
    type: RuntimeDefault
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  runAsNonRoot: true
  runAsUser: 33
  seccompProfile:
    type: RuntimeDefault
nodeSelector: {}
tolerations: []
affinity: {}
