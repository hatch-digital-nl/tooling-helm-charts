apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "yii2.fullname" . }}
  labels:
    {{- include "yii2.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "yii2.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "yii2.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: {{ .Values.sharedVolume.name }}
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: {{ include "yii2.fullname" . }}-nginx-config
      initContainers:
        - name: data-container
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.dataImage.repository }}:{{ .Values.dataImage.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.dataImage.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Copying Yii2 application files to shared volume..."
              cp -r /app/. /data/
          volumeMounts:
            - name: {{ .Values.sharedVolume.name }}
              mountPath: /data
          resources:
            {{- toYaml .Values.resources.init | nindent 12 }}
      containers:
        - name: php
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.phpImage.repository }}:{{ .Values.phpImage.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.phpImage.pullPolicy }}
          env:
            {{- range $key, $value := .Values.yii2.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- if .Values.redis.enabled }}
            # Redis environment variables
            - name: REDIS_HOST
              value: {{ include "yii2.fullname" . }}-redis
            - name: REDIS_PORT
              value: {{ .Values.redis.service.port | quote }}
            {{- if .Values.redis.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "yii2.fullname" . }}-redis
                  key: redis-password
            {{- end }}
            - name: REDIS_TIMEOUT
              value: "1"
            - name: REDIS_READ_TIMEOUT
              value: "1"
            - name: REDIS_DATABASE
              value: "0"
            {{- end }}
            {{- if .Values.secretMounts }}
            # Mount secrets as environment variables
            {{- range $secretConfig := .Values.secretMounts }}
            {{- if $secretConfig.secretName }}
            {{- range $keyMapping := $secretConfig.keys }}
            {{- if kindIs "string" $keyMapping }}
            # Simple key (no renaming)
            - name: {{ $keyMapping }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretConfig.secretName }}
                  key: {{ $keyMapping }}
            {{- else }}
            # Key with renaming (from -> to)
            - name: {{ $keyMapping.to }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretConfig.secretName }}
                  key: {{ $keyMapping.from }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: {{ .Values.sharedVolume.name }}
              mountPath: /var/www/html
          resources:
            {{- toYaml .Values.resources.php | nindent 12 }}
        - name: nginx
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.nginxImage.repository }}:{{ .Values.nginxImage.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.nginxImage.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: {{ .Values.sharedVolume.name }}
              mountPath: /var/www/html
              readOnly: true
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
              readOnly: true
          resources:
            {{- toYaml .Values.resources.nginx | nindent 12 }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.path }}
              port: {{ .Values.probes.startup.port }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
